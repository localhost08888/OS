================ FILE: PSJF.c ================
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct
{
    char pname[20];
    int at, bt, ct, tat, wt, bt1;
} Process;

void accept_info(Process p[], int n)
{
    for (int i = 0; i < n; i++)
    {
        printf("Enter process name: ");
        scanf("%s", p[i].pname);

        printf("Enter arrival time: ");
        scanf("%d", &p[i].at);

        printf("Enter first CPU burst time: ");
        scanf("%d", &p[i].bt);

        p[i].bt1 = p[i].bt;
    }
}

int find_next_process(Process p[], int n, int time)
{
    int shortest = -1;
    for (int i = 0; i < n; i++)
    {
        if (p[i].bt1 > 0 && p[i].at <= time)
        {
            if (shortest == -1 || p[i].bt1 < p[shortest].bt1)
            {
                shortest = i;
            }
        }
    }
    return shortest;
}

void simulate_sjf(Process p[], int n)
{
    int time = 0, completed = 0;
    while (completed < n)
    {
        int idx = find_next_process(p, n, time);
        if (idx == -1)
        {
            time++;
            continue;
        }
        p[idx].bt1--;
        time++;
        if (p[idx].bt1 == 0)
        {
            p[idx].ct = time;
            p[idx].tat = p[idx].ct - p[idx].at;
            p[idx].wt = p[idx].tat - p[idx].bt;
            completed++;
            time += 2;
        }
    }
}

void print_output(Process p[], int n)
{
    float avg_tat = 0, avg_wt = 0;
    printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++)
    {
        printf("%s\t%d\t%d\t%d\t%d\t%d\n", p[i].pname, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt);
        avg_tat += p[i].tat;
        avg_wt += p[i].wt;
    }
    printf("\nAverage Turnaround Time = %.2f\n", avg_tat / n);
    printf("Average Waiting Time = %.2f\n", avg_wt / n);
}

void print_gantt_chart(Process p[], int n)
{
    printf("\nGantt Chart:\n");
    int time = 0;
    while (1)
    {
        int idx = find_next_process(p, n, time);
        if (idx == -1)
        {
            printf("| Idle (%d-%d) ", time, time + 1);
            time++;
        }
        else
        {
            printf("| %s (%d-%d) ", p[idx].pname, time, time + 1);
            p[idx].bt1--;
            time++;
            if (p[idx].bt1 == 0)
            {
                printf("| I/O (%d-%d) ", time, time + 2);
                time += 2;
            }
        }
        int all_completed = 1;
        for (int i = 0; i < n; i++)
        {
            if (p[i].bt1 > 0)
            {
                all_completed = 0;
                break;
            }
        }
        if (all_completed)
            break;
    }
    printf("|\n");
}

int main()
{
    srand(time(0));
    int n;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process p[n];
    accept_info(p, n);
    simulate_sjf(p, n);
    print_output(p, n);
    print_gantt_chart(p, n);

    return 0;
}

================ FILE: RR.c ================
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct
{
    char pname[20];
    int at, bt, ct, tat, wt, bt1;
} Process;

void accept_info(Process p[], int n)
{
    for (int i = 0; i < n; i++)
    {
        printf("Enter process name: ");
        scanf("%s", p[i].pname);
        printf("Enter arrival time: ");
        scanf("%d", &p[i].at);
        printf("Enter burst time: ");
        scanf("%d", &p[i].bt);
        p[i].bt1 = p[i].bt;
    }
}

void simulate_rr(Process p[], int n, int quantum)
{
    int time = 0, completed = 0;
    int queue[n], front = 0, rear = 0;
    int in_queue[n];
    for (int i = 0; i < n; i++)
        in_queue[i] = 0;

    for (int i = 0; i < n; i++)
    {
        if (p[i].at == 0)
        {
            queue[rear++] = i;
            in_queue[i] = 1;
        }
    }

    while (completed < n)
    {
        if (front == rear)
        {
            time++;
            for (int i = 0; i < n; i++)
            {
                if (p[i].at == time && !in_queue[i])
                {
                    queue[rear++] = i;
                    in_queue[i] = 1;
                }
            }
            continue;
        }

        int idx = queue[front++];
        if (p[idx].bt1 > quantum)
        {
            time += quantum;
            p[idx].bt1 -= quantum;
        }
        else
        {
            time += p[idx].bt1;
            p[idx].bt1 = 0;
            p[idx].ct = time;
            p[idx].tat = p[idx].ct - p[idx].at;
            p[idx].wt = p[idx].tat - p[idx].bt;
            completed++;
        }

        for (int i = 0; i < n; i++)
        {
            if (p[i].at <= time && p[i].bt1 > 0 && !in_queue[i])
            {
                queue[rear++] = i;
                in_queue[i] = 1;
            }
        }

        if (p[idx].bt1 > 0)
        {
            queue[rear++] = idx;
        }
    }
}

void print_output(Process p[], int n)
{
    float avg_tat = 0, avg_wt = 0;
    printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++)
    {
        printf("%s\t%d\t%d\t%d\t%d\t%d\n", p[i].pname, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt);
        avg_tat += p[i].tat;
        avg_wt += p[i].wt;
    }
    printf("\nAverage Turnaround Time = %.2f\n", avg_tat / n);
    printf("Average Waiting Time = %.2f\n", avg_wt / n);
}

int main()
{
    srand(time(0));
    int n, quantum;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter time quantum: ");
    scanf("%d", &quantum);
    Process p[n];
    accept_info(p, n);
    simulate_rr(p, n, quantum);
    print_output(p, n);
    return 0;
}

================ FILE: FCFS.c ================
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct
{
    char pname[20];
    int at;
    int bt;
    int ct;
    int tat;
    int wt;
    int bt1;
} Process;

void accept_info(Process p[], int n)
{
    for (int i = 0; i < n; i++)
    {
        printf("Enter process name: ");
        scanf("%s", p[i].pname);

        printf("Enter arrival time: ");
        scanf("%d", &p[i].at);

        printf("Enter first CPU burst time: ");
        scanf("%d", &p[i].bt);

        p[i].bt1 = p[i].bt;
    }
}

void sort_by_arrival(Process p[], int n)
{
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = i + 1; j < n; j++)
        {
            if (p[i].at > p[j].at)
            {
                Process temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }
}

void simulate_fcfs(Process p[], int n)
{
    int time = 0;
    for (int i = 0; i < n; i++)
    {
        if (time < p[i].at)
        {
            time = p[i].at;
        }
        time += p[i].bt1;
        p[i].ct = time;
        p[i].tat = p[i].ct - p[i].at;
        p[i].wt = p[i].tat - p[i].bt;

        time += 2;

        p[i].bt1 = rand() % 10 + 1;
    }
}

void print_output(Process p[], int n)
{
    float avg_tat = 0, avg_wt = 0;
    printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++)
    {
        printf("%s\t%d\t%d\t%d\t%d\t%d\n",
               p[i].pname, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt);
        avg_tat += p[i].tat;
        avg_wt += p[i].wt;
    }
    printf("\nAverage Turnaround Time = %.2f\n", avg_tat / n);
    printf("Average Waiting Time = %.2f\n", avg_wt / n);
}

void print_gantt_chart(Process p[], int n)
{
    printf("\nGantt Chart:\n");
    int time = 0;
    for (int i = 0; i < n; i++)
    {
        if (time < p[i].at)
        {
            printf("| Idle (%d-%d) ", time, p[i].at);
            time = p[i].at;
        }
        printf("| %s (%d-%d) ", p[i].pname, time, time + p[i].bt);
        time += p[i].bt;
        printf("| I/O (%d-%d) ", time, time + 2);
        time += 2;
    }
    printf("|\n");
}

int main()
{
    srand(time(0));
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process p[n];
    accept_info(p, n);
    sort_by_arrival(p, n);
    simulate_fcfs(p, n);
    print_output(p, n);
    print_gantt_chart(p, n);

    return 0;
}

================ FILE: PPS.c ================
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdbool.h>
#include <string.h>

#define IO_WAIT 2
#define MIN_NEXT_BURST 1    
#define MAX_NEXT_BURST 5     

typedef struct 
{
    char pname[20];           
    int at;                  
    int burst;                 
    int orig_burst;           
    int priority;              
    int ct;                   
    int tat;                  
    int wt;                 
    bool inIO;                
    int io_remaining;         
    bool finished;           
} Process;
   
void accept_info(Process p[], int n)
{
    for (int i = 0; i < n; i++) 
    {
        printf("Enter process name: ");
        scanf("%s", p[i].pname);

        printf("Enter arrival time: ");
        scanf("%d", &p[i].at);

        printf("Enter first CPU burst time: ");
        scanf("%d", &p[i].burst);

        p[i].orig_burst = p[i].burst;    
        
        printf("Enter priority (lower number = higher priority): ");
        scanf("%d", &p[i].priority);
        
        p[i].inIO = false;
        p[i].io_remaining = 0;
        p[i].finished = false;
        p[i].ct = 0;
        p[i].tat = 0;
        p[i].wt = 0;
    }
}

int find_highest_priority(Process p[], int n, int time) 
{
    int idx = -1;
    int best_priority = 9999;
    for (int i = 0; i < n; i++)
    {
        if (p[i].at <= time && !p[i].inIO && !p[i].finished && p[i].burst > 0)
        {
            if (p[i].priority < best_priority) 
            {
                best_priority = p[i].priority;
                idx = i;
            }
        }
    }
    return idx;
}
   
void simulate_preemptive_priority(Process p[], int n)
{
    int time = 0;
    int completed = 0;
    int total_tat = 0, total_wt = 0;
      
    typedef struct 
    {
        char label[20];
        int start;
        int end;
    } Segment;
    Segment gantt[1000];
    int segCount = 0;
      
    while (completed < n)
    {
        for (int i = 0; i < n; i++) 
        {
            if (p[i].inIO)
            {
                p[i].io_remaining--;
                if (p[i].io_remaining <= 0)
                {
                    p[i].inIO = false;
                    int nextBurst = (rand() % MAX_NEXT_BURST) + MIN_NEXT_BURST;
                    p[i].burst = nextBurst;
                }
            }
        }
        
        int idx = find_highest_priority(p, n, time);
        if (idx == -1)
        {
            int idleStart = time;
            time++;
            gantt[segCount].start = idleStart;
            gantt[segCount].end = time;
            snprintf(gantt[segCount].label, sizeof(gantt[segCount].label), "Idle");
            segCount++;
            continue;
        }
        
        if (segCount == 0 || (segCount > 0 && strcmp(gantt[segCount-1].label, p[idx].pname) != 0)) 
        {
            gantt[segCount].start = time;
            snprintf(gantt[segCount].label, sizeof(gantt[segCount].label), "%s", p[idx].pname);
        }
        
        p[idx].burst--;
        time++;
          
        if (p[idx].burst == 0) 
        {
            gantt[segCount].end = time;
            segCount++;
            p[idx].finished = true;
            p[idx].ct = time;
            p[idx].tat = p[idx].ct - p[idx].at;
            p[idx].wt = p[idx].tat - p[idx].orig_burst;
            total_tat += p[idx].tat;
            total_wt += p[idx].wt;
            completed++;
        }
    }
    
    printf("\nGantt Chart:\n");
    for (int i = 0; i < segCount; i++)
    {
        printf("| %s (%d-%d) ", gantt[i].label, gantt[i].start, gantt[i].end);
    }
    printf("|\n");
    
    printf("\nProcess Table:\n");
    printf("PName\tAT\tBT\tPriority\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++)
    {
        printf("%s\t%d\t%d\t%d\t%d\t%d\t%d\n", p[i].pname, p[i].at, p[i].orig_burst, p[i].priority, p[i].ct, p[i].tat, p[i].wt);
    }
    
    printf("\nAverage Turnaround Time: %.2f\n", (float)total_tat / n);
    printf("Average Waiting Time: %.2f\n", (float)total_wt / n);
}

int main() 
{
    srand(time(0));  
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    Process p[n];
    accept_info(p, n);
    simulate_preemptive_priority(p, n);
    return 0;
}

================ FILE: NPSJF.c ================
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct
{
    char pname[20];  
    int at, bt, ct, tat, wt, bt1;    
} Process;

void accept_info(Process p[], int n)
{
    for (int i = 0; i < n; i++)
    {
        printf("Enter process name: ");
        scanf("%s", p[i].pname);

        printf("Enter arrival time: ");
        scanf("%d", &p[i].at);

        printf("Enter first CPU burst time: ");
        scanf("%d", &p[i].bt);

        p[i].bt1 = p[i].bt;
    }
}

void sort_by_arrival(Process p[], int n)
{
    for (int i = 0; i < n - 1; i++) 
    {
        for (int j = i + 1; j < n; j++)
        {
            if (p[i].at > p[j].at) 
            {
                Process temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }
}

int find_next_process(Process p[], int n, int time) 
{
    int shortest = -1;
    for (int i = 0; i < n; i++)
    {
        if (p[i].bt1 > 0 && p[i].at <= time) 
        {
            if (shortest == -1 || p[i].bt1 < p[shortest].bt1) 
            {
                shortest = i;
            }
        }
    }
    return shortest;
}

void simulate_sjf(Process p[], int n) 
{
    int time = 0, completed = 0;
    while (completed < n) 
    {
        int idx = find_next_process(p, n, time);
        if (idx == -1) 
        {
            time++;
            continue;
        }

        time += p[idx].bt1;
        p[idx].ct = time;
        p[idx].tat = p[idx].ct - p[idx].at;
        p[idx].wt = p[idx].tat - p[idx].bt;
        p[idx].bt1 = 0;
        completed++;
        time += 2;  
        p[idx].bt1 = rand() % 10 + 1;  
    }
}

void print_output(Process p[], int n)
{
    float avg_tat = 0, avg_wt = 0;
    printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) 
    {
        printf("%s\t%d\t%d\t%d\t%d\t%d\n", p[i].pname, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt);
        avg_tat += p[i].tat;
        avg_wt += p[i].wt;
    }
    printf("\nAverage Turnaround Time = %.2f\n", avg_tat / n);
    printf("Average Waiting Time = %.2f\n", avg_wt / n);
}

void print_gantt_chart(Process p[], int n) 
{
    printf("\nGantt Chart:\n");
    int time = 0;
    for (int i = 0; i < n; i++)
    {
        if (time < p[i].at) 
        {
            printf("| Idle (%d-%d) ", time, p[i].at);
            time = p[i].at;
        }
        printf("| %s (%d-%d) ", p[i].pname, time, time + p[i].bt);
        time += p[i].bt;
        printf("| I/O (%d-%d) ", time, time + 2);
        time += 2;
    }
    printf("|\n");
}

int main()
{
    srand(time(0));
    int n;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process p[n];
    accept_info(p, n);

    sort_by_arrival(p, n);

    simulate_sjf(p, n);

    print_output(p, n);
    
    print_gantt_chart(p, n);
    return 0;
}

================ FILE: NPPS.c ================
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

typedef struct
{
    char pname[20];
    int at, bt, orig_bt;
    int ct, tat, wt;
    int priority;
} Process;

void accept_info(Process p[], int n)
{
    for (int i = 0; i < n; i++)
    {
        printf("Enter process name: ");
        scanf("%s", p[i].pname);

        printf("Enter arrival time: ");
        scanf("%d", &p[i].at);

        printf("Enter burst time: ");
        scanf("%d", &p[i].bt);
        p[i].orig_bt = p[i].bt;

        printf("Enter priority (lower number indicates higher priority): ");
        scanf("%d", &p[i].priority);
    }
}

int find_next_process(Process p[], int n, int time)
{
    int highest_priority = 9999;
    int idx = -1;
    for (int i = 0; i < n; i++)
    {
        if (p[i].at <= time && p[i].bt > 0)
        {
            if (p[i].priority < highest_priority)
            {
                highest_priority = p[i].priority;
                idx = i;
            }
        }
    }
    return idx;
}

void simulate_priority(Process p[], int n)
{
    int time = 0, completed = 0;
    while (completed < n)
    {
        int idx = find_next_process(p, n, time);
        if (idx == -1)
        {
            time++;
            continue;
        }

        time += p[idx].bt;
        p[idx].ct = time;
        p[idx].tat = p[idx].ct - p[idx].at;
        p[idx].wt = p[idx].tat - p[idx].orig_bt;
        p[idx].bt = 0;
        completed++;

        time += 2;
    }
}

void print_output(Process p[], int n)
{
    float avg_tat = 0, avg_wt = 0;
    printf("\nProcess\tAT\tBT\tPriority\tCT\tTAT\tWT\n");

    for (int i = 0; i < n; i++)
    {
        printf("%s\t%d\t%d\t%d\t\t%d\t%d\t%d\n",
               p[i].pname, p[i].at, p[i].orig_bt, p[i].priority,
               p[i].ct, p[i].tat, p[i].wt);
        avg_tat += p[i].tat;
        avg_wt += p[i].wt;
    }
    printf("\nAverage Turnaround Time = %.2f\n", avg_tat / n);
    printf("Average Waiting Time = %.2f\n", avg_wt / n);
}

void print_gantt_chart(Process p[], int n)
{
    Process proc[n];
    for (int i = 0; i < n; i++)
    {
        proc[i] = p[i];
        proc[i].bt = proc[i].orig_bt;
    }

    printf("\nGantt Chart:\n");
    int time = 0, completed = 0;

    while (completed < n)
    {
        int idx = find_next_process(proc, n, time);
        if (idx == -1)
        {
            printf("| Idle (%d-%d) ", time, time + 1);
            time++;
        }
        else
        {
            printf("| %s (%d-%d) ", proc[idx].pname, time, time + proc[idx].bt);
            time += proc[idx].bt;

            proc[idx].bt = 0;
            completed++;

            printf("| I/O (%d-%d) ", time, time + 2);
            time += 2;
        }
    }
    printf("|\n");
}

int main()
{
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    Process p[n];

    accept_info(p, n);
    simulate_priority(p, n);
    print_output(p, n);
    print_gantt_chart(p, n);

    return 0;
} 